// systemtap script for profiling bitcoind

@define checkpid %(if (pid() != targetpid) next %)

global targetpid
probe begin {
  targetpid = target()
}

// information about vfs timing
global vfs
probe vfs.*.return {
  @checkpid
  vfs[sprintf("count:%s", name)]++
  vfs[sprintf("time:%s", name)] += gettimeofday_us() - @entry(gettimeofday_us())
}

// also add this guy, which reads a page on ext4
probe kernel.function("ext4_mpage_readpages").return {
  @checkpid
  vfs["count:ext4_mpage_readpages"]++
  vfs["time:ext4_mpage_readpages"] += gettimeofday_us() - @entry(gettimeofday_us())
}

// information about bio ("block io") requests
global bio
probe ioblock.*, ioblock_trace.* {
  @checkpid
  bio[sprintf("count:%s", name)]++
}

// again, add information about ext4 mpages
probe kernel.function("ext4_mpage_readpages") {
  @checkpid
  bio["pages:ext4_mpage_readpages"] += $nr_pages
  bio["count:ext4_mpage_readpages"]++
}

probe bitcoind = process("/home/evan/code/bitcoin/src/bitcoind") {}

// record when cache flushes start
probe bitcoind.mark("cache__flush") {
  t = gettimeofday_us()
  secs = t / 1000000
  micros = t % 1000000
  printf("flush count:coins=%lu count:bytes=%lu t=%lu.%06lu\n", $arg1, $arg2, secs, micros)
  println()
}

// record CCoinsViewCache hits
global hits
probe bitcoind.mark("cache__hit") {
  hits++
}

// record CCoinsViewCache misses
global misses
probe bitcoind.mark("cache__miss") {
  misses++
}

function show_cache() {
  printf("cache hits=%lu misses=%lu\n", hits, misses)
  hits=0
  misses=0
}

global tip
probe bitcoind.mark("update__tip") {
  tip["height"] = $arg1
  tip["count:utxo"] = $arg2
  tip["memory:utxo"] = $arg3
  tip["progress"] = $arg4
}

global leveldb
probe bitcoind.function("leveldb::DBImpl::Get").return {
  leveldb["count:get"]++
  leveldb["time:get"] += gettimeofday_us() - @entry(gettimeofday_us())
}

function show_mem() {
  page_size = mem_page_size()
  vsz = proc_mem_size() * page_size
  rss = proc_mem_rss() * page_size
  data = proc_mem_data() * page_size
  printf("memory virtual=%lu rss=%lu data=%lu\n", vsz, rss, data)
}

@define showmap(event, obj) %(
  print(@event)
  foreach([key] in @obj) {
    printf(" %s=%d", key, @obj[key])
  }
  println()
  delete @obj
%)

function show_all() {
  // print the timestamp for these events
  t = gettimeofday_us()
  secs = t / 1000000
  micros = t % 1000000
  printf("time t=%lu.%06lu\n", secs, micros)

  // now show the events
  @showmap("bio", bio)
  @showmap("vfs", vfs)
  @showmap("leveldb", leveldb)
  show_cache()
  show_mem()

  height = tip["height"]
  progress = tip["progress"]
  @showmap("updatetip", tip)
  tip["height"] = height
  tip["progress"] = progress

  println()
}

probe timer.sec(10) {
  show_all()
}

global start_time
probe begin {
  start_time = gettimeofday_s()
  show_all()
}

probe bitcoind.mark("finish__ibd") {
  printf("finish seconds=%d\n", gettimeofday_s() - start_time)
  exit()  // N.B. doesn't exit in interactive mode
}
