// systemtap script for profiling bitcoind

@define checkpid %(if (pid() != targetpid) next %)

global targetpid
probe begin {
  targetpid = target()
}

// information about vfs timing
global vfs
probe vfs.*.return {
  @checkpid
  vfs[sprintf("%s:count", name)]++
  vfs[sprintf("%s:time", name)] += gettimeofday_us() - @entry(gettimeofday_us())
}

// also add this guy, which reads a page on ext4
probe kernel.function("ext4_mpage_readpages").return {
  @checkpid
  vfs["ext4_mpage_readpages:count"]++
  vfs["ext4_mpage_readpages:time"] += gettimeofday_us() - @entry(gettimeofday_us())
}

// information about bio ("block io") requests
global bio
probe ioblock.*, ioblock_trace.* {
  @checkpid
  bio[sprintf("%s:count", name)]++
}

// again, add information about ext4 mpages
probe kernel.function("ext4_mpage_readpages") {
  @checkpid
  bio["ext4_mpage_readpages:pages"] += $nr_pages
  bio["ext4_mpage_readpages:count"]++
}

global syscall
probe syscall.mmap2, syscall.munmap, syscall.open, syscall.close {
  @checkpid
  syscall[sprintf("%s:count", name)]++
}

probe bitcoind = process("/home/evan/code/bitcoin/src/bitcoind") {}

function show_time(data: string) {
  t = gettimeofday_us()
  secs = t / 1000000
  micros = t % 1000000
  printf("time t=%lu.%06lu data=%s\n", secs, micros, data)
}

// record when cache flushes start
probe bitcoind.mark("cache__flush") {
  show_time("flush")
  printf("flush coins:count=%lu coins:bytes=%lu\n", $arg1, $arg2)
  println()
}

// record CCoinsViewCache hits
global hits
probe bitcoind.mark("cache__hit") {
  hits++
}

// record CCoinsViewCache misses
global misses
probe bitcoind.mark("cache__miss") {
  misses++
}

function show_cache() {
  printf("cache hits=%lu misses=%lu\n", hits, misses)
  hits=0
  misses=0
}

global tip
probe bitcoind.mark("update__tip") {
  tip["height"] = $arg1
  tip["utxo:count"] = $arg2
  tip["utxo:size"] = $arg3
  tip["progress"] = $arg4
}

global leveldb
probe bitcoind.function("leveldb::DBImpl::Get").return {
  leveldb["get:count"]++
  leveldb["get:time"] += gettimeofday_us() - @entry(gettimeofday_us())
}

probe bitcoind.function("leveldb::DBImpl::Put").return {
  leveldb["put:count"]++
  leveldb["put:time"] += gettimeofday_us() - @entry(gettimeofday_us())
}

probe bitcoind.function("leveldb::DBImpl::Write").return {
  leveldb["write:count"]++
  leveldb["write:time"] += gettimeofday_us() - @entry(gettimeofday_us())
}

probe bitcoind.function("leveldb::DBImpl::Delete").return {
  leveldb["delete:count"]++
  leveldb["delete:time"] += gettimeofday_us() - @entry(gettimeofday_us())
}

function show_mem() {
  page_size = mem_page_size()
  vsz = proc_mem_size(targetpid) * page_size
  rss = proc_mem_rss(targetpid) * page_size
  data = proc_mem_data(targetpid) * page_size
  printf("memory virtual:bytes=%lu rss:bytes=%lu data:bytes=%lu\n", vsz, rss, data)
}

@define showmap(event, obj) %(
  print(@event)
  foreach([key] in @obj) {
    printf(" %s=%d", key, @obj[key])
  }
  println()
  delete @obj
%)

function show_all() {
  // print the timestamp for these events
  show_time("timer")

  // now show the events
  @showmap("bio", bio)
  @showmap("vfs", vfs)
  @showmap("leveldb", leveldb)
  @showmap("syscall", syscall)
  show_cache()
  show_mem()

  height = tip["height"]
  progress = tip["progress"]
  @showmap("updatetip", tip)
  tip["height"] = height
  tip["progress"] = progress

  println()
}

probe timer.sec(10) {
  show_all()
}

global start_time
probe begin {
  start_time = gettimeofday_s()
  show_all()
}

probe bitcoind.mark("finish__ibd") {
  printf("finish elapsed:time=%d\n", gettimeofday_s() - start_time)
  exit()  // N.B. doesn't exit in interactive mode
}
