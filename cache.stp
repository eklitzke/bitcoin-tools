// systemtap script for profiling bitcoind

@define checkpid %(if (pid() != targetpid) next %)

global targetpid
probe begin {
  targetpid = target()
}

@define showmap(event, obj) %(
  print(@event)
  foreach([key] in @obj) {
    printf(" %s=%d", key, @obj[key])
  }
  println()
  delete @obj
%)

global vfs
probe vfs.*.return {
  @checkpid
  vfs[name] += gettimeofday_us() - @entry(gettimeofday_us())
}

probe kernel.function("ext4_mpage_readpages").return {
  @checkpid
  vfs["ext4_mpage_readpages"] += gettimeofday_us() - @entry(gettimeofday_us())
}

probe bitcoind = process("/home/evan/code/bitcoin/src/bitcoind") {
}

// record when cache flushes start
probe bitcoind.mark("cache__flush") {
  t = gettimeofday_us()
  secs = t / 1000000
  micros = t % 1000000
  printf("flush t=%lu.%06lu num_coins=%lu num_bytes=%lu\n", secs, micros, $arg1, $arg2)
}

// record cache hits
global hits
probe bitcoind.mark("cache__hit") {
  hits++
}

// record cache misses
global misses
probe bitcoind.mark("cache__miss") {
  misses++
}

function show_cache() {
  printf("cache hits=%d misses=%d\n", hits, misses)
  hits=0
  misses=0
}

global tip
probe bitcoind.mark("update__tip") {
  tip["height"] = $arg1
  tip["utxo_count"] = $arg2
  tip["utxo_memory"] = $arg3
  tip["progress"] = $arg4
}

global bio
probe ioblock.*, ioblock_trace.* {
  bio[sprintf("call:%s", name)]++
}

probe vfs.do_mpage_readpage, kernel.function("ext4_mpage_readpages") {
  @checkpid
  bio["mpage_readpages"] += $nr_pages
  bio["mpage_readpages_calls"]++
}

probe timer.sec(10) {
  // print the timestamp for these events
  t = gettimeofday_us()
  secs = t / 1000000
  micros = t % 1000000
  printf("time t=%lu.%06lu\n", secs, micros)

  // now show the events
  @showmap("bio", bio)
  @showmap("updatetip", tip)
  @showmap("vfs", vfs)
  show_cache()
}

global start_time
probe begin {
  start_time = gettimeofday_s()
}

probe bitcoind.mark("finish__ibd") {
  printf("finished ibd in %d seconds\n", gettimeofday_s() - start_time)
  exit()  // N.B. doesn't exit in interactive mode
}
